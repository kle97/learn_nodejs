{"version":3,"sources":["Notes.js","Notification.js","Footer.js","services/notes.js","services/login.js","Toggleable.js","LoginForm.js","NoteForm.js","App.js","index.js"],"names":["Notes","note","toggleImportance","deleteFunc","label","important","className","content","onClick","value","Notification","message","Footer","style","color","fontStyle","fontSize","token","getAll","a","axios","get","response","data","create","newObject","config","headers","Authorization","post","update","id","put","remove","delete","setToken","newToken","login","credentials","Toggleable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","onChange","type","NoteForm","createNote","newNote","setNewNote","event","preventDefault","Math","random","target","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","notesToShow","filter","useEffect","noteService","then","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","toggleImportanceOf","changedNote","returnedNote","map","current","catch","error","statusText","console","log","setTimeout","deleteNotes","confirm","index","findIndex","handleLogin","loginService","setItem","stringify","addNote","noteObject","noteFormRef","concat","useRef","name","removeItem","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ab63f2e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Notes = ({note, toggleImportance, deleteFunc}) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n    return (\r\n        <li className={'note'}>{note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n            <button value={note.content} onClick={deleteFunc}>delete</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Notes","import React from \"react\";\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br/>\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n    token = `bearer ${newToken}`\r\n}\r\n\r\nconst getAll = async () => {\r\n    const response = await axios.get(baseUrl)\r\n    return response.data\r\n}\r\n\r\nconst create = async newObject => {\r\n    const config = {\r\n        headers: { Authorization: token },\r\n    }\r\n\r\n    const response = await axios.post(baseUrl, newObject, config)\r\n    return response.data\r\n}\r\n\r\nconst update = async (id, newObject) => {\r\n    const config = {\r\n        headers: { Authorization: token },\r\n    }\r\n\r\n    const response = await axios.put(`${baseUrl}/${id}`, newObject, config)\r\n    return response.data\r\n}\r\n\r\nconst remove = async (id) =>{\r\n    const config = {\r\n        headers: { Authorization: token },\r\n    }\r\n\r\n    const response = await axios.delete(`${baseUrl}/${id}`, config)\r\n    return response.data\r\n}\r\n\r\nexport default {getAll, create, update, remove, setToken}","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { login }","import React, { useState, useImperativeHandle } from 'react'\r\n\r\nconst Toggleable = React.forwardRef((props, ref) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const hideWhenVisible = { display: visible ? 'none' : '' }\r\n    const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n    const toggleVisibility = () => {\r\n        setVisible(!visible)\r\n    }\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            toggleVisibility\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div style={hideWhenVisible}>\r\n                <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n            </div>\r\n            <div style={showWhenVisible}>\r\n                {props.children}\r\n                <button onClick={toggleVisibility}>cancel</button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Toggleable","import React from 'react'\r\n\r\nconst LoginForm = ({handleSubmit, handleUsernameChange, handlePasswordChange, username, password}) => {\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    username\r\n                    <input value={username} onChange={handleUsernameChange}/>\r\n                </div>\r\n                <div>\r\n                    password\r\n                    <input type=\"password\" value={password} onChange={handlePasswordChange}\r\n                    />\r\n                </div>\r\n                <button type=\"submit\">login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, {useState} from 'react'\r\n\r\nconst NoteForm = ({ createNote}) => {\r\n    const [newNote, setNewNote] = useState('')\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        createNote({\r\n            content: newNote,\r\n            important: Math.random() < 0.5,\r\n        })\r\n        setNewNote('')\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Create a new note</h2>\r\n\r\n            <form onSubmit={addNote}>\r\n                <input value={newNote} onChange={handleNoteChange}\r\n                />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteForm","import React, {useEffect, useState, useRef} from 'react'\nimport Notes from './Notes'\nimport Notification from \"./Notification\"\nimport Footer from \"./Footer\"\nimport noteService from './services/notes'\nimport loginService from \"./services/login\"\nimport Toggleable from \"./Toggleable\"\nimport LoginForm from \"./LoginForm\"\nimport NoteForm from \"./NoteForm\";\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [user, setUser] = useState(null)\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n    useEffect(() => {\n        noteService.getAll().then(initialNotes => {\n            setNotes(initialNotes)\n        })\n    }, [])\n\n    useEffect(() => {\n        const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n        if (loggedUserJSON) {\n            const user = JSON.parse(loggedUserJSON)\n            setUser(user)\n            noteService.setToken(user.token)\n        }\n    }, [])\n\n    const toggleImportanceOf = (note) => () => {\n        const changedNote = {...note, important: !note.important}\n\n        noteService.update(note.id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(current => note.id !== current.id ? current : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(error.response.statusText)\n                console.log(error.message)\n                console.log(error.response)\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n            })\n    }\n\n    const deleteNotes = (event) => {\n        if (window.confirm(\"Delete \" + event.target.value + \"?\")) {\n            const index = notes.findIndex(current => current.content === event.target.value)\n            const id = notes[index].id\n            noteService.remove(id)\n                .then(() => {\n                    setNotes(notes.filter(current => current.id !== id))\n                })\n                .catch(error => {\n                    setErrorMessage(error.response.statusText)\n                    console.log(error.message)\n                    console.log(error.response)\n                    setTimeout(() => {\n                        setErrorMessage(null)\n                    }, 5000)\n                })\n        }\n    }\n\n    const handleLogin = async (event) => {\n        event.preventDefault()\n\n        try {\n            const user = await loginService.login({\n                username, password,\n            })\n            window.localStorage.setItem(\n                'loggedNoteappUser', JSON.stringify(user)\n            )\n            noteService.setToken(user.token)\n            setUser(user)\n            setUsername('')\n            setPassword('')\n        } catch (exception) {\n            setErrorMessage('Wrong credentials')\n            setTimeout(() => {\n                setErrorMessage(null)\n            }, 5000)\n        }\n    }\n\n    const handleLogout = () => {\n        window.localStorage.removeItem('loggedNoteappUser')\n        noteService.setToken('')\n        setUser(null)\n    }\n\n    const loginForm = () => (\n        <Toggleable buttonLabel='Login Here'>\n            <LoginForm\n                username={username}\n                password={password}\n                handleUsernameChange={(event) => setUsername(event.target.value)}\n                handlePasswordChange={(event) => setPassword(event.target.value)}\n                handleSubmit={handleLogin}\n            />\n        </Toggleable>\n    )\n\n    const addNote = (noteObject) => {\n        noteFormRef.current.toggleVisibility()\n        noteService.create(noteObject).then(returnedNote => {\n            setNotes(notes.concat(returnedNote))\n        })\n    }\n\n    const noteFormRef = useRef()\n\n    const noteForm = () => (\n        <Toggleable buttonLabel=\"new note\" ref={noteFormRef}>\n            <NoteForm createNote={addNote}/>\n        </Toggleable>\n    )\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage}/>\n\n            {user === null ?\n                loginForm() :\n                <div>\n                    <p>{user.name} logged-in</p>\n                    {noteForm()}\n                    <button onClick={handleLogout}>log out</button>\n                </div>\n            }\n\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n\n            <ul>\n                {notesToShow.map(note => <Notes\n                    key={note.id}\n                    note={note}\n                    toggleImportance={toggleImportanceOf(note)}\n                    deleteFunc={deleteNotes}/>)}\n            </ul>\n\n            <Footer/>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}