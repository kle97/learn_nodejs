{"version":3,"sources":["Notes.js","services/notes.js","App.js","index.js"],"names":["Notes","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteService","initialNotes","console","log","length","toggleImportanceOf","changedNote","returnedNote","map","current","catch","error","setTimeout","n","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"sOAWeA,EATD,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,wBAAIC,UAAW,QAASJ,EAAKK,QACzB,4BAAQC,QAASL,GAAmBC,K,gBCL1CK,EAAU,+BAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCXvCK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKd,UAAU,SACVc,IAKPC,EAAS,WAMX,OACI,yBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIN,6BACA,uGAgFGC,EA3EH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KA0BRC,EAAcJ,EACdJ,EACAA,EAAMS,QAAO,SAAAnC,GAAI,OAAIA,EAAKG,aAEhCiC,qBAAU,WACNC,IAAqB3B,MAAK,SAAA4B,GACtBX,EAASW,QAEd,IAEHC,QAAQC,IAAI,SAAUd,EAAMe,OAAQ,SAEpC,IAAMC,EAAqB,SAAC1C,GAAD,OAAU,WACjC,IAAM2C,EAAW,2BAAO3C,GAAP,IAAaG,WAAYH,EAAKG,YAE/CkC,EAAmBrC,EAAKe,GAAI4B,GAAajC,MAAK,SAAAkC,GAC1CjB,EAASD,EAAMmB,KAAI,SAAAC,GAAO,OAAI9C,EAAKe,KAAO+B,EAAQ/B,GAAK+B,EAAUF,SAClEG,OAAM,SAAAC,GACLf,EAAgB,SAAD,OAAUjC,EAAKK,QAAf,sCACf4C,YAAW,WACPhB,EAAgB,QACjB,KACHN,EAASD,EAAMS,QAAO,SAAAe,GAAC,OAAIA,EAAEnC,KAAOf,EAAKe,YAGjD,OACI,6BACI,qCACA,kBAAC,EAAD,CAAcG,QAASc,IACvB,6BACI,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKI,EAAYW,KAAI,SAAA7C,GAAI,OAAI,kBAAC,EAAD,CACrBmD,IAAKnD,EAAKe,GACVf,KAAMA,EACNC,iBAAkByC,EAAmB1C,SAE7C,0BAAMoD,SA5DE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACflD,QAASuB,EACT4B,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,GAC3B7C,GAAIW,EAAMe,OAAS,GAGvBJ,EAAmBkB,GAAY7C,MAAK,SAAAkC,GAChCjB,EAASD,EAAMmC,OAAOjB,IACtBf,EAAW,SAkDP,2BAAOiC,MAAOlC,EAASmC,SA9CV,SAACV,GACtBd,QAAQC,IAAIa,EAAMW,OAAOF,OACzBjC,EAAWwB,EAAMW,OAAOF,UA6ChB,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,QC/FZC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.f3989ae1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Notes = ({note, toggleImportance}) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n    return (\r\n        <li className={'note'}>{note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Notes","import axios from 'axios'\r\nconst baseUrl = 'https://eaterie.me/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update}","import React, {useEffect, useState} from 'react'\nimport Notes from './Notes'\nimport noteService from './services/notes'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n        </div>\n    )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1,\n        }\n\n        noteService.create(noteObject).then(returnedNote => {\n            setNotes(notes.concat(returnedNote))\n            setNewNote('')\n        })\n    }\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important);\n\n    useEffect(() => {\n        noteService.getAll().then(initialNotes => {\n            setNotes(initialNotes)\n        })\n    }, [])\n\n    console.log('render', notes.length, 'notes');\n\n    const toggleImportanceOf = (note) => () => {\n        const changedNote = {...note, important: !note.important}\n\n        noteService.update(note.id, changedNote).then(returnedNote => {\n            setNotes(notes.map(current => note.id !== current.id ? current : returnedNote))\n        }).catch(error => {\n            setErrorMessage(`Note '${note.content}' was already removed from server`)\n            setTimeout(() => {\n                setErrorMessage(null)\n            }, 5000)\n            setNotes(notes.filter(n => n.id !== note.id))\n        })\n    }\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map(note => <Notes\n                    key={note.id}\n                    note={note}\n                    toggleImportance={toggleImportanceOf(note)}/>)}\n            </ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange}/>\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}